-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : 70 hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources is allowed *iff.* it

- hasn't been explicitly prohibited by the assignment description, *and*
- is correctly cited.

https://mariusbancila.ro/blog/2017/01/20/dining-philosophers-in-c11-chandy-misra-algorithm/

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as style, efficiency, robustness, 
generality, or realism of a solution.  Put another way, identifying then
reasoning about these latter aspects forms part of the assessment, so they
are not (necessarily) detailed explicitly.

    Stage 1 : a baseline kernel
X           - pre-emptive multi-tasking                              ( 30%)
X           - priority-based scheduler                               ( 10%)

    Stage 2 : closed generalisations and enhancements
X           - fork, exec, and exit system calls                      ( 15%)
X           - Inter-Process Communication (IPC)                      ( 15%)

    Stage 3 : open   generalisations and enhancements                ( 30%)
[?]           - MMU-based protection and virtualisation
                *OR*
[?]           - LCD screen and PS/2 device drivers and GUI
                *OR*
[?]           - file system based on simplified, emulated disk
                *OR*
[?]           - kernel port to real, physical hardware                     

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

For Stage 1a, the priority+age-based scheduling algorithm was chosen as it
still allows for the user to be able to interact using the console, rather
than focusing purely on processes. We also have a number of programs which
run forever until killed, making FCFS and SJF inappropriate for use. Other
than program P6.c, which gives the console a base priority of 10, there is
no process that utilises the nice() function.

For Stage 2b, the Chandy/Misra solution was chosen as it allows for the most
concurrency out of the three known solutions, as well as solving the problem
of starvation; each philosopher is guaranteed to eventually 'eat'. Labelling
chopsticks as clean/dirty enables giving preference to starving philosophers
while giving a disadvantage to those who have just ate.

Each process has a different time of finishing their thinking and eating
phases, with philosopher 0 being the fastest and the others eventually
becoming slower. Therefore, the output will gradually look more inactive
until philosopher 15 has finished eating; once finished, it will be more
active. This cycle repeats until the kernel is terminated. 

The main goal of philosophers correctly sharing their chopsticks has been
achieved; however, there isn't a way to close theshared memory region when
killing all the philosopher processes.

-------------------------------------------------------------------------------
